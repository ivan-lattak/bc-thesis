#ifndef SOLUTION_H
#define SOLUTION_H

#include <stdexcept>
#include <cstddef>

using namespace std;

class container_empty { };

template <typename T>
class Array {

private:
    T* elements;
    size_t _size;
    size_t capacity;

public:
    Array() : elements(nullptr), _size(0), capacity(4) {
        elements = new T[capacity];
    }

    size_t size() const { return _size; }

    bool empty() const { return size() == 0; }

    T at(const size_t index) const  {
        if (index >= size()) {
            throw out_of_range("");
        }
        return elements[index];
    }

    T pop_back() {
        if (size() == 0) {
            throw container_empty();
        }
        _size--;
        return elements[size()];
    }

    void push_back(const T& element) {
        size_t new_size = size() + 1;
        if (new_size > capacity) {
            capacity *= 2;
            T* new_elements = new T[capacity];
            for (size_t i = 0; i < size(); i++) {
                new_elements[i] = elements[i];
            }
            delete[] elements;
            elements = new_elements;
        }
        elements[_size++] = element;
    }

    void clear() {
        delete[] elements;
        elements = new T[capacity];
        _size = 0;
    }

};

#endif // SOLUTION_H
